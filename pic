using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Threading;

namespace EAutoClicker
{
    public partial class EACForm : Form
    {

        private Point mouseClick;
        System.Windows.Forms.Timer t = new System.Windows.Forms.Timer();
        System.Windows.Forms.Timer timerRemove = new System.Windows.Forms.Timer(); 
        bool stop = false;
        bool removehook = false;


        [DllImport("user32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern void mouse_event(uint dwFlags, int dx, int dy, uint cButtons, UIntPtr dwExtraInfo);
        private const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        private const uint MOUSEEVENTF_LEFTUP = 0x04;
        private const uint MOUSEEVENTF_RIGHTDOWN = 0x08;
        private const uint MOUSEEVENTF_RIGHTUP = 0x10;

        [DllImport("user32.dll")]
    	private static extern bool RegisterHotKey(IntPtr hWnd, int id, int fsModifiers, int vk);

        [DllImport("User32.Dll")]
        public static extern long SetCursorPos(int x, int y);

        [DllImport("user32.dll")]
        public static extern bool UnregisterHotKey(IntPtr hWnd, int id);
        
        [StructLayout(LayoutKind.Sequential)]
        public struct POINT
        {
            public int x;public int y;
        }


        public EACForm()
        {
            InitializeComponent();
            timerRemove.Interval = 1000;
            timerRemove.Enabled = true;
            timerRemove.Tick += new EventHandler(timerRemove_Tick);
        }

        void timerRemove_Tick(object sender, EventArgs e)
        {
            if(removehook == true)
                UnregisterHotKey(this.Handle, GetHashCode());
        }

        void sendMouseDown()
        {
            POINT p = new POINT();
            p.x = mouseClick.X;
            p.y = mouseClick.Y;

            SetCursorPos(p.x, p.y);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, p.x, p.y, 0, System.UIntPtr.Zero);
        }

        private void EACbutton_Click(object sender, EventArgs e)
        {
            t.Interval = 100;
            t.Tick += new EventHandler(t_Tick);
            t.Enabled = true;
        }

        void t_Tick(object sender, EventArgs e)
        {
            EACbutton.Text = "(X: " + System.Windows.Forms.Cursor.Position.X + ", Y" + System.Windows.Forms.Cursor.Position.Y + ")";
            EACbutton.Text += "\n Press 'C' to lock";
        }

        private void EACbutton_KeyPress(object sender, KeyPressEventArgs e)
        {       if (e.KeyChar == 'c')
            {
                t.Enabled = false;
                mouseClick.X = System.Windows.Forms.Cursor.Position.X;
                mouseClick.Y = System.Windows.Forms.Cursor.Position.Y;
                wNumberMouseX.Value = mouseClick.X;
                wNumberMouseY.Value = mouseClick.Y;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // LISTEN FOR ESCAPE SO WE CAN STOP THE CLICKER
            RegisterHotKey(this.Handle, GetHashCode(), 0, (int)Keys.Escape); 
            
            stop = false;
            removehook = false;
            
            // FORCE THE FORM TO BE ON TOP
            TopMost = true;
            
            new Thread(() =>
                {
                    int total = (int)wNumericCycles.Value * (int)numericUpDown2.Value;
                    for (int i = 0; i < wNumericCycles.Value; i++)
                    {
                        total -= (int)numericUpDown2.Value;
                        sendMouseDown();
                        Thread.Sleep((int)numericUpDown2.Value);
                        wLabelTimeRemaining.Invoke((MethodInvoker)delegate { wLabelTimeRemaining.Text = "Time Remaining: " + (total / 1000);  });
                        wLabelCycles.Invoke((MethodInvoker)delegate { wLabelCycles.Text = "Cycle " + (i + 1) + " / " + wNumericCycles.Value; });
                        
                        if (stop == true)
                            break;
                    }


                    removehook = true;

                }).Start();

        }

        }

        protected override void WndProc(ref Message m)
        {
            Console.WriteLine("Press: " + m.Msg);
            if (m.Msg == 786)
            {
                stop = true;
            }
            base.WndProc(ref m);
        }

        private void EACForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            UnregisterHotKey(this.Handle, GetHashCode());
        }

        public override int GetHashCode()
        {
            return (int)Keys.Escape ^ Handle.ToInt32();
        }



    }
}
